module Module12_1 (
    i_clk: input clock,
    i_rst: input reset,
) {
    var a: logic;
    var b: logic;
    var c: logic;

    always_ff (i_clk) {
        if_reset {
            c = 0;
        } else {
            c = ~a;
        }
    }

    always_ff {
        if_reset {
            a = 0;
        } else {
            a = ~a;
        }
    }

    always_ff {
        b = a;
    }
}

module Module12_2 (
    i_clk   : input `_ clock           ,
    i_clk_p : input `_ clock_posedge   ,
    i_clk_n : input `_ clock_negedge   ,
    i_rst   : input `_ reset           ,
    i_rst_ah: input `_ reset_async_high,
    i_rst_al: input `_ reset_async_low ,
    i_rst_sh: input `_ reset_sync_high ,
    i_rst_sl: input `_ reset_sync_low  ,
) {
    var a : logic;
    var aa: logic;
    let b : logic = 1;
    let c : logic = 1;

    // always_ff declaration with default polarity
    always_ff (i_clk, i_rst) {
        if_reset {
            a = 1'b0;
        } else if a {
            a = b[0];
        } else {
            a = c[5:0];
        }
    }

    // always_ff declaration without reset
    always_ff (i_clk) {
        if a {
            a = b;
        } else {
            a = c[5:0];
        }
    }

    // always_ff declaration with specified polarity
    always_ff (i_clk_p, i_rst_ah) {
        if_reset {
            a = 1'b0;
        } else {
            a = c[5:0];
        }
    }
    always_ff (i_clk_n, i_rst_al) {
        if_reset {
            a = 1'b0;
        } else {
            a = c[5:0];
        }
    }
    always_ff (i_clk_p, i_rst_sh) {
        if_reset {
            a = 1'b0;
        } else {
            a = c[5:0];
        }
    }
    always_ff (i_clk_n, i_rst_sl) {
        if_reset {
            a = 1'b0;
        } else {
            a = c[5:0];
        }
    }

    // if_reset with loop
    var d: logic<10>;
    for i in 0..10 :g {
        always_ff (i_clk, i_rst) {
            if_reset {
                d[i] = i;
            }
        }
    }

    // if_reset with loop
    var e: logic<10>;
    always_ff (i_clk, i_rst) {
        if_reset {
            for i: u32 in 0..10 {
                e[i] = i;
            }
        }
    }

    // always_comb declaration
    always_comb {
        a    = 10;
        aa   = 10'b0;
        aa.a = 10'b01z;

        a  = 10 + 10;
        aa = 10 + 16'hffff * (3 / 4);
    }
}
